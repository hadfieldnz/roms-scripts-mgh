#! /usr/bin/env python

"""Select an areal subset of a ROMS history-type"""

# MGH 2014-08-08
#   - Written

import sys
import os
import subprocess

try:
    from optparse import OptionParser
except:
    from optik import OptionParser

def outname(file_in, xi_range, eta_range):
    if xi_range:
        xi_string = 'xi_%d_%d'%(xi_range[0],xi_range[1])
    else:
        xi_string = None
    if eta_range:
        eta_string = 'eta_%d_%d'%(eta_range[0],eta_range[1])
    else:
        eta_string = None
    if file_in.endswith('.nc'):
        base = file_in[0:-3]
        extn = '.nc'
    else:
       base = file_in
       extn = None
    file_out = [base]
    if xi_string:
        file_out.append(xi_string)
    if eta_string:
        file_out.append(eta_string)
    file_out = '_'.join(file_out)
    if extn:
        file_out = file_out+extn
    return file_out

def process(file_in, file_out, xi_range, eta_range, over):
    cmd = ['ncks']
    if over:
        cmd.append('-O')
    if xi_range:
        r0 = xi_range[0]
        r1 = xi_range[1]
        opt = '-d xi_rho,%d,%d -d xi_u,%d,%d -d xi_v,%d,%d -d xi_psi,%d,%d'
        cmd.append(opt%(r0,r1,r0,r1-1,r0,r1,r0,r1-1))
    if eta_range:
        r0 = eta_range[0]
        r1 = eta_range[1]
        opt = '-d eta_rho,%d,%d -d eta_u,%d,%d -d eta_v,%d,%d -d eta_psi,%d,%d'
        cmd.append(opt%(r0,r1,r0,r1,r0,r1-1,r0,r1-1))
    cmd.append(file_in)
    if file_out:
        cmd.append(file_out)
    cmd = ' '.join(cmd)
    subprocess.call(cmd, shell=True)

def main():
    usage = __doc__ + "\n\n  %prog file_in [file_out] [options]"
    op = OptionParser(usage=usage)
    op.add_option("-O", "--overwrite",
                  action="store_true", default=False,
                  help="Overwrite output file without prompting")
    op.add_option("-x", "--xi",
                  action="store", type="string", dest="xi", metavar="xi_min,xi_max",
                  help="Subset of rho grid in xi direction")
    op.add_option("-e", "--eta",
                  action="store", type="string", dest="eta", metavar="eta_min,eta_max",
                  help="Subset of rho grid in eta direction")
    (opts, args) = op.parse_args()
    if len(args) == 0:
        sys.exit('This script requires at least one positional argument')
    elif len(args) == 1:
        file_in = args[0]
        file_out = None
    elif len(args) == 2:
        file_in = args[0]
        file_out = args[1]
    else:
        sys.exit('This script requires no more than 2 positional arguments')
    try:
        if opts.xi:
            xi_split = opts.xi.split(',')
            xi_range = [long(xi_split[0]),long(xi_split[1])]
        else:
            xi_range = None
        if opts.eta:
            eta_split = opts.eta.split(',')
            eta_range = [long(eta_split[0]),long(eta_split[1])]
        else:
            eta_range = None
        if not file_out:
            file_out = outname(file_in, xi_range, eta_range)
        process(file_in, file_out, xi_range, eta_range, opts.overwrite)
    except (IOError, OSError), (errno, strerr):
        sys.exit(strerr)

if __name__ == '__main__':
    main()
