#! /usr/bin/env bash

# This is the successor to the roms_build script, more similar in operation
# to the build.bash scripts provided with ROMS. The only functionality
# from the old roms_build that has been sacrificed is the ability to combine
# multiple source trees.

# MGH 2018-02-08
#   - Written as roms_build2
# MGH 2018-02-09
#   - Renamed this script to roms_build, replacing the old script of the same
#     name
# MGH 2018-02-12
#   - The ROMS source location variable is now named MY_ROMS_SRC, as in ROMS
#     build.bash files. This eliminates the risk of inadvertently processing
#     old-style build_parameters files.
#   - Positional arguments are now allowed and are passed to make.
# MGH 2018-02-14
#   - The name of the build environment file can now be set via the command
#     line. The default is .build_env.
# MGH 2018-02-15
#   - Added the -p (print makefile macros) option, supporting multiple macros

set -e

# Process arguments

while getopts "b:e:gmop:s:" opt
do
  case "${opt}" in
    b)
      build_env=${OPTARG}
      ;;
    e)
      exe_dir=${OPTARG}
      ;;
    g)
      use_debug=1
      ;;
    m)
      use_mpi=1
      ;;
    o)
      use_omp=1
      ;;
    p)
      pargs=${pargs}" "print-${OPTARG}
      ;;
    s)
      scratch_dir=${OPTARG}
      ;;
  esac
done
shift $(( ${OPTIND}-1 ))

if test -z "${build_env}"
then
  build_env=.build_env
fi
echo The build environment file is ${build_env}

if test -z "${scratch_dir}"
then
  scratch_dir=$(roms_bldir)/Build-$(uname -s -m | tr " " "-")-$(basename ${FORT})
fi
echo ROMS will be built in ${scratch_dir}

if test -z "${exe_dir}"
then
  exe_dir=${PWD}
fi
echo The executable will be copied to ${exe_dir}

# The build environment file must contain code to specify the ROMS_APPLICATION
# and MY_ROMS_SRC variables. It will normally specify other environment
# variables, notably MY_HEADER_DIR and MY_ANALYTICAL_DIR. It can also check
# that the right options have been chosen for the simulation.

source ${build_env}

if test -n "${MY_ROMS_SRC}"
then
  echo ROMS source path is ${MY_ROMS_SRC}
else
  echo "MY_ROMS_SRC has not been set" 1>&2
  exit 1
fi

if test -n "${ROMS_APPLICATION}"
then
  echo ROMS application is ${ROMS_APPLICATION}
else
  echo "ROMS_APPLICATION has not been set" 1>&2
  exit 1
fi

if test -n "${MY_HEADER_DIR}"
then
  echo ROMS header directory is ${MY_HEADER_DIR}
fi

if test -n "${MY_ANALYTICAL_DIR}"
then
  echo ROMS analytical directory is ${MY_ANALYTICAL_DIR}
fi

# Move to source directory

echo "Moving to source directory"

cd ${MY_ROMS_SRC}

echo "Git working tree status:"
(git status || echo "This does not appear to be a Git repository") | (sed -r 's/^(.*)/  \1/g')

# Test for the presence of a makefile.

if !(test -f makefile)
then
  echo "No makefile" 1>&2
  exit 1
fi

# Make executable

make_args=""
if test -n "${use_debug}"
then
  make_args=${make_args}" USE_DEBUG=on"
  scratch_dir=${scratch_dir}-debug
fi
if test -n "${use_mpi}"
then
  make_args=${make_args}" USE_MPI=on"
  scratch_dir=${scratch_dir}-MPI
fi
if test -n "${use_omp}"
then
  make_args=${make_args}" USE_OpenMP=on"
  scratch_dir=${scratch_dir}-OpenMP
fi
make ${make_args} ROMS_APPLICATION=${ROMS_APPLICATION} SCRATCH_DIR=${scratch_dir} BIN=${scratch_dir}/ocean ${pargs} "$@"

# Copy executable to the appropriate directory

if (test -f ${scratch_dir}/ocean)
then
  echo "Copying executable to "${exe_dir}
  cp -vf ${scratch_dir}/ocean ${exe_dir}
fi
