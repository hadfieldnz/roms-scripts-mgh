#! /usr/bin/env bash

# MGH 2009-10-22:
#   The script now copies the executable to the working directory
#   rather than making a link in the build directory.
#
# MGH 2009-10-29:
#   The directory to which the executable is copied can now be set
#   with the -e switch; the default is the working directory in effect
#   when the script is invoked. This change was required to get the
#   test cases working.
#
# MGH 2012-10-02:
#   The environment variables to be read from the build_parameters
#   files are now ROMS_APPLICATION and ROMS_SRCPATH.

set -e

# Process arguments

while getopts "d:e:fgmo" opt
do
  case "${opt}" in
    d)
      bld_dir=${OPTARG}
      ;;
    e)
      exe_dir=${OPTARG}
      ;;
    f)
      as_file=1
      ;;
    g)
      use_debug=1
      ;;
    m)
      use_mpi=1
      ;;
    o)
      use_omp=1
      ;;
  esac
done
shift $(( ${OPTIND}-1 ))

if test -n "${1}"
then
  echo Positional arguments are not permitted
  exit 1
fi

if test -z "${bld_dir}"
then
  bld_dir=$(roms_bldir)
fi

echo ROMS will be built in ${bld_dir}

if test -z "${exe_dir}"
then
  exe_dir=${PWD}
fi

echo Executable will be copied to ${exe_dir}

# This script requires Gnu cp. Allow the path to this command to be specified
# via an environment variable.

if test -n "${CP}"
then
  cp=${CP}
else
  cp=cp
fi

# File "build_parameters" in the current directory must contain code
# to specify the ROMS_SRCPATH & ROMS_APPLICATION variables

source ./build_parameters

if test -z "${ROMS_SRCPATH}"
then
  echo "ROMS_SRCPATH has not been set" 1>&2
  exit 1
fi

if test -z "${ROMS_APPLICATION}"
then
  echo "ROMS_APPLICATION has not been set" 1>&2
  exit 1
fi

echo ROMS application is ${ROMS_APPLICATION}
echo ROMS source path is ${ROMS_SRCPATH}

# Move to build directory

if !(test -d ${bld_dir})
then
  mkdir -p ${bld_dir}
fi

echo Moving to build directory

cd ${bld_dir}

# Test for the presence of a makefile; if there is none, collate the
# source with roms_collate.

if !(test -f makefile)
then
  if test -n "${as_file}"
  then
    roms_collate -f -p "${ROMS_SRCPATH}"
  else
    roms_collate -p "${ROMS_SRCPATH}"
  fi
fi

# Make binary with roms_make

make_args=""
if test -n "${use_debug}"
then
  make_args=${make_args}" -g"
fi
if test -n "${use_mpi}"
then
  make_args=${make_args}" -m"
fi
if test -n "${use_omp}"
then
  make_args=${make_args}" -o"
fi
roms_make ${make_args} ROMS_APPLICATION=${ROMS_APPLICATION}

# The roms_make command, if successful, will have made an executable
# in the scratch subdirectory. Get the directory name by calling
# roms_make with the "-d" switch and work out the executable name

scratch_dir=$(roms_make -d ${make_args})

if test -n "${use_debug}"
then
    ocean_exe=${scratch_dir}/oceanG
else
  if test -n "${use_mpi}"
  then
    ocean_exe=${scratch_dir}/oceanM
  else
    if test -n "${use_omp}"
    then
      ocean_exe=${scratch_dir}/oceanO
    else
      ocean_exe=${scratch_dir}/oceanS
    fi
  fi
fi

# Return to the original working directory and make a copy of the
# executable there. For simplicity in calling it, and to avoid
# confusion between different executables in the same directory, give
# it the name "ocean".  On the Windows-hosted systems, Cygwin and
# MSYS/MinGW, the linker will have created an executable with the
# suffix ".exe". However this suffix is not needed by the bash shell.

echo Copying executable

if !(test -d ${exe_dir})
then
  mkdir -p ${exe_dir}
fi

case $(uname -s) in
  MINGW* | CYGWIN*)
    suffix=.exe
esac

${cp} -v -f ${bld_dir}/${ocean_exe}${suffix} ${exe_dir}/ocean

